name: Compile Sketch

# The workflow will run on every push and pull request to the repository
on:
  - push
  - pull_request

jobs:
  compile-sketch:
    runs-on: ubuntu-latest

    steps:
      # This step makes the contents of the repository available to the workflow
      - name: Checkout repository
        uses: actions/checkout@v4

      # For more information: https://github.com/arduino/compile-sketches#readme
      - name: Compile sketch
        uses: arduino/compile-sketches@v1
        with:
          # The default is to compile for the Arduino Uno board. If you want to compile for other boards, use the `fqbn` input.
          verbose: true
          platforms: |
            # Install WEMOS D1 MINI ESP32 platform via Boards Manager
            - name: esp32:esp32
              source-url: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json
              version: 3.0.0
          fqbn: esp32:esp32:d1_mini32

          sketch-paths: |
            # Configure the action to search all folders under the root of the repository for sketches and compile them.
            # This is formatted as a YAML list, which makes it possible to have multiple sketch paths if needed.
            - ./
          libraries: |
            # The "blink" sketch being compiled in this demo doesn't use any libraries, so just use an empty list
            - name: RotaryEncoder
            - name: ezButton

      # Move the compiled binary to a specific directory
      - name: Move compiled binary
        run: |
          mkdir -p ./compiled_bin
          mv $(find /tmp/arduino/sketches -name "*.bin") ./compiled_bin/

      
      # Upload compiled binary as artifact
      - name: Upload compiled binary
        uses: actions/upload-artifact@v3
        with:
          name: compiled-sketch
          path: ./compiled_bin/om0et_quansheng_control.ino.merged.bin

      # Create a new GitHub release
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        with:
          tag_name: 'v1.0.${{ github.run_number }}'
          release_name: 'Release ${{ github.run_number }}'
          draft: false
          prerelease: false

      # Upload compiled binary to the release
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./compiled_bin/*.bin
          asset_name: om0et_quansheng_control.ino.merged.bin
          asset_content_type: application/octet-stream 
